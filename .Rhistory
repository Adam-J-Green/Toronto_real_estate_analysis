rast_crime<- raster::rasterize(crime_rates, rast(toronto_grid), crime_rates$robberies_per_pop)
list_vect<- vect(listing)
listing_full<- terra::extract(rast_crime, listing) %>% mutate(across(layer, ~replace_na(., median(.,na.rm = TRUE ))))
listing$crime_rate<- listing_full$layer
poly_transformed<- poly%>% st_transform('EPSG:2017')
listing = listing[poly_transformed,,op=st_within]
listing<-listing %>%mutate(prox_green = df_green$result)
listing<-listing %>%mutate(prox_grocery = df_grocery$result)
listing<-listing %>%mutate(prox_affordable = df_affordable$result)
crime_rates = crime_rates %>% mutate(robberies_per_pop = ROBBERY112/POPN_PR4*1000) %>% dplyr::select(robberies_per_pop)
View(crime_rates)
View(listing)
crime_rate<- tm_layout(main.title = 'Crime Rate')+
tm_shape(rast_crime)+
tm_raster(title = 'Robberies/1000 people')+
tm_scale_bar()
list_of_maps<- list(spatial_features_grocery, spatial_features_green, spatial_features_afford, crime_rate)
tmap_animation(list_of_maps, filename = 'Features_gif', delay = 80, width = 600, height = 600)
tmap_animation(list_of_maps, filename = 'Features_gif.gif', delay = 80, width = 600, height = 600)
tmap_animation(list_of_maps, filename = 'Features_gif.gif', delay = 200, width = 600, height = 600)
## universal kriging models
variogram_univ<- variogram(price~beds+size+prox_subway+prox_green+ prox_grocery+prox_affordable+crime_rate, listing)
## universal kriging models
sum(is.na(listing$price))
sum(is.na(listing$beds))
sum(is.na(listing$prox_subway))
View(listing)
variogram_univ<- variogram(price~beds+inter_size+prox_subway+prox_green+ prox_grocery+prox_affordable+crime_rate, listing)
View(listing)
#convert columns to numeric
listings$beds = as.numeric(listings$beds)
listings$baths = as.numeric(listings$baths)
listings$inter_size = as.numeric(listings$inter_size)
#create bounding box for entirety of Toronto
toronto_bbox = c(left = -79.6392,
bottom = 43.403221,
right = -79.115952,
top = 43.855457)
#create zoomed bounding box polygon to represent the sub-region of interest in the city's downtown
x_coords<- c(-79.43203, -79.35401, -79.35401,  -79.43203)
y_coords<- c(43.63689, 43.63689, 43.67521, 43.67521)
polygon<- sp::Polygon(cbind(x_coords, y_coords))
poly<- sp::Polygons(list(polygon), ID = 'A')%>% list()%>% sp::SpatialPolygons()%>%st_as_sf() %>% st_set_crs('EPSG:4326') %>%st_transform(crs = 'EPSG:2958')
#define function to help set proper crs when reading in external datasets
set_coord_map<- function(data){
data = data%>%st_set_crs('EPSG:4326')
data = data%>% st_transform('EPSG:2958')
data = data%>% st_transform('EPSG:2017')
return(data)
}
#load datasets for spatial features
crime_rates<- set_coord_map(read_sf("Data/Crime/", layer = "neighbourhood-crime-rates - 4326"))
green_space<- set_coord_map(read_sf("Data/GreenSpace", layer = "Green Spaces - 4326"))
ward_locations<- set_coord_map(read_sf("Data/25-ward-model-december-2018-wgs84-latitude-longitude", layer ='WARD_WGS84'))%>%dplyr::select()
affordable_housing<- set_coord_map(read_sf("Data/Affordable Rental Housing Pipeline - 4326", layer = 'Affordable Rental Housing Pipeline - 4326'))
subway<- set_coord_map(read_sf("Data/ttc-subway-shapefile-wgs84", layer = 'TTC_SUBWAY_LINES_WGS84'))
zoning<- set_coord_map(read_sf("Data/Zoning", layer = 'Zoning Area - 4326'))
#load data for rental listings
Listings_wlocations<- read_csv('Data/Listings_wlocations.csv')
#load locations of grocery stores
grocery_stores = opq(toronto_bbox)%>%
add_osm_feature(key ='shop', value = 'supermarket')%>% osmdata_sf()%>% .$osm_points %>% dplyr::select() %>% st_transform('EPSG:2017')
#generate toronto border shape
border_toronto = opq(toronto_bbox)%>%
add_osm_feature(key = 'name', value = 'Toronto')%>%
add_osm_feature(key = 'admin_level', value = '6')%>% osmdata_sf()%>%.$osm_multipolygon%>% dplyr::select()%>% st_transform('EPSG:2958')
#process rental listings to sf format with interpolated apartment size values
listings = st_as_sf(Listings_wlocations, coords = c('longitude', 'latitude'))%>% st_set_crs('EPSG:4326') %>% st_transform(crs = 'EPSG:2958')
listings = listings%>% group_by('beds')%>% mutate(inter_size = na.approx(size, na.rm = TRUE))%>% filter(!row_number() == 1)
listings = listings%>% group_by('beds')%>% mutate(inter_size = na.approx(listings$size, na.rm = TRUE))%>% filter(!row_number() == 1)
listings = listings%>% group_by('beds')%>% mutate(inter_size = na.approx(listings$size, na.rm = TRUE))
listings = listings%>% group_by(beds)%>% mutate(inter_size = na.approx(listings$size, na.rm = TRUE))%>% filter(!row_number() == 1)
listings = listings%>% group_by(beds)%>% mutate(inter_size = na.approx(listings$size, na.rm = TRUE))#%>% filter(!row_number() == 1)
#process rental listings to sf format with interpolated apartment size values
listings = st_as_sf(Listings_wlocations, coords = c('longitude', 'latitude'))%>% st_set_crs('EPSG:4326') %>% st_transform(crs = 'EPSG:2958')
listings = listings%>% group_by(beds)%>% mutate(inter_size = na.approx(listings$size, na.rm = TRUE))#%>% filter(!row_number() == 1)
#process rental listings to sf format with interpolated apartment size values
listings = st_as_sf(Listings_wlocations, coords = c('longitude', 'latitude'))%>% st_set_crs('EPSG:4326') %>% st_transform(crs = 'EPSG:2958')
View(listings)
listings = listings%>% group_by(beds)%>% mutate(inter_size = na.approx(listings$size, na.rm = TRUE))#%>% filter(!row_number() == 1)
View(listings)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, out.height = '75%', out.width = '75%')
listings = listings%>% group_by('beds')%>% mutate(inter_size = na.approx(size, na.rm = FALSE))%>% filter(!row_number() == 1)
listings = listings%>% group_by(beds)%>% mutate(inter_size = na.approx(listings$size, na.rm = FALSE))%>% filter(!row_number() == 1)
#create bounding box for entirety of Toronto
toronto_bbox = c(left = -79.6392,
bottom = 43.403221,
right = -79.115952,
top = 43.855457)
#create zoomed bounding box polygon to represent the sub-region of interest in the city's downtown
x_coords<- c(-79.43203, -79.35401, -79.35401,  -79.43203)
y_coords<- c(43.63689, 43.63689, 43.67521, 43.67521)
polygon<- sp::Polygon(cbind(x_coords, y_coords))
poly<- sp::Polygons(list(polygon), ID = 'A')%>% list()%>% sp::SpatialPolygons()%>%st_as_sf() %>% st_set_crs('EPSG:4326') %>%st_transform(crs = 'EPSG:2958')
#define function to help set proper crs when reading in external datasets
set_coord_map<- function(data){
data = data%>%st_set_crs('EPSG:4326')
data = data%>% st_transform('EPSG:2958')
data = data%>% st_transform('EPSG:2017')
return(data)
}
#load datasets for spatial features
crime_rates<- set_coord_map(read_sf("Data/Crime/", layer = "neighbourhood-crime-rates - 4326"))
green_space<- set_coord_map(read_sf("Data/GreenSpace", layer = "Green Spaces - 4326"))
ward_locations<- set_coord_map(read_sf("Data/25-ward-model-december-2018-wgs84-latitude-longitude", layer ='WARD_WGS84'))%>%dplyr::select()
affordable_housing<- set_coord_map(read_sf("Data/Affordable Rental Housing Pipeline - 4326", layer = 'Affordable Rental Housing Pipeline - 4326'))
subway<- set_coord_map(read_sf("Data/ttc-subway-shapefile-wgs84", layer = 'TTC_SUBWAY_LINES_WGS84'))
zoning<- set_coord_map(read_sf("Data/Zoning", layer = 'Zoning Area - 4326'))
#load data for rental listings
Listings_wlocations<- read_csv('Data/Listings_wlocations.csv')
#load locations of grocery stores
grocery_stores = opq(toronto_bbox)%>%
add_osm_feature(key ='shop', value = 'supermarket')%>% osmdata_sf()%>% .$osm_points %>% dplyr::select() %>% st_transform('EPSG:2017')
#generate toronto border shape
border_toronto = opq(toronto_bbox)%>%
add_osm_feature(key = 'name', value = 'Toronto')%>%
add_osm_feature(key = 'admin_level', value = '6')%>% osmdata_sf()%>%.$osm_multipolygon%>% dplyr::select()%>% st_transform('EPSG:2958')
#process rental listings to sf format with interpolated apartment size values
listings = st_as_sf(Listings_wlocations, coords = c('longitude', 'latitude'))%>% st_set_crs('EPSG:4326') %>% st_transform(crs = 'EPSG:2958')
listings = listings%>% group_by(beds)%>% mutate(inter_size = na.approx(listings$size, na.rm = FALSE))%>% filter(!row_number() == 1)
listings = listings%>% group_by('beds')%>% mutate(inter_size = na.approx(size, na.rm = FALSE))%>% filter(!row_number() == 1)
View(listings)
model<- lm(as.numeric(size)~as.numeric(beds)+as.numeric(baths), data = listing)
summary(model)
model<- lm(as.numeric(size)~as.numeric(beds), data = listing)
summary(model)
#convert columns to numeric
listings$beds = as.numeric(listings$beds)
listings$baths = as.numeric(listings$baths)
listings$inter_size = as.numeric(listings$inter_size)
#filter listings to remove outliers from price and size columns
listing = listings%>%dplyr::select(price, beds, baths, inter_size) %>% dplyr::filter(price<6000)%>%st_transform('EPSG:2017')
#filter listings to remove outliers from price and size columns
listing = listings%>%dplyr::select(price, beds, baths, inter_size) %>% dplyr::filter(price<6000)%>%st_transform('EPSG:2017')
#create a grid for toronto to allow interpolation
toronto_grid = st_bbox(st_transform(poly, 'EPSG:2017'))%>%st_as_stars(dx = 10)%>%st_crop(st_transform(poly, 'EPSG:2017'))
#Add Distance based features to dataset
dist_list_subway = st_nn(listing$geometry, subway$geometry, k = 1, returnDist = T)
df_subway<- as.data.frame(dist_list_subway['dist']) %>% pivot_longer(cols = starts_with('dist'), values_to = 'result')
listing<- listing%>% mutate(prox_subway = df_subway$result)
dist_list_green = st_nn(listing$geometry, green_space$geometry, k = 1, returnDist = T)
df_green<- as.data.frame(dist_list_green['dist']) %>% pivot_longer(cols = starts_with('dist'), values_to = 'result')
listing<-listing %>%mutate(prox_green = df_green$result)
dist_list_grocery = st_nn(listing$geometry, grocery_stores$geometry, k = 1, returnDist = T)
df_grocery<- as.data.frame(dist_list_grocery['dist']) %>% pivot_longer(cols = starts_with('dist'), values_to = 'result')
listing<-listing %>%mutate(prox_grocery = df_grocery$result)
dist_list_affordable = st_nn(listing$geometry, affordable_housing$geometry, k = 1, returnDist = T)
df_affordable<- as.data.frame(dist_list_affordable['dist']) %>% pivot_longer(cols = starts_with('dist'), values_to = 'result')
listing<-listing %>%mutate(prox_affordable = df_affordable$result)
crime_rates = crime_rates %>% mutate(robberies_per_pop = ROBBERY112/POPN_PR4*1000) %>% dplyr::select(robberies_per_pop)
rast_crime<- raster::rasterize(crime_rates, rast(toronto_grid), crime_rates$robberies_per_pop)
list_vect<- vect(listing)
listing_full<- terra::extract(rast_crime, listing) %>% mutate(across(layer, ~replace_na(., median(.,na.rm = TRUE ))))
listing$crime_rate<- listing_full$layer
poly_transformed<- poly%>% st_transform('EPSG:2017')
listing = listing[poly_transformed,,op=st_within]
variogram_univ<- variogram(price~beds+inter_size+prox_subway+prox_green+ prox_grocery+prox_affordable+crime_rate, listing)
fitted_var_univ<- fit.variogram(variogram_univ, vgm(800000,'Exp',1500,1, Err = 1.5))
View(listing)
kriging_univ_full<- krige(price~beds+inter_size+prox_subway+prox_green+ prox_grocery+prox_affordable+crime_rate, listing, toronto_grid, fitted_var_univ)
kriging_univ_full<- krige(price~(beds+inter_size+prox_subway+prox_green+ prox_grocery+prox_affordable+crime_rate), listing, toronto_grid, fitted_var_univ)
kriging_univ_full<- krige(price~inter_size+prox_subway+prox_green+ prox_grocery+prox_affordable+crime_rate), listing, toronto_grid, fitted_var_univ)
kriging_univ_full<- krige(price~inter_size+prox_subway+prox_green+ prox_grocery+prox_affordable+crime_rate, listing, toronto_grid, fitted_var_univ)
kriging_univ_full<- krige(price~listing$inter_size+prox_subway+prox_green+ prox_grocery+prox_affordable+crime_rate, listing, toronto_grid, fitted_var_univ)
kriging_univ_full<- krige(price~listing$inter_size+listing$prox_subway+listing$prox_green+ listing$prox_grocery+listing$prox_affordable+listing$crime_rate, listing, toronto_grid, fitted_var_univ)
listing<- drop_na(listing)
variogram_univ<- variogram(price~beds+inter_size+prox_subway+prox_green+ prox_grocery+prox_affordable+crime_rate, listing)
fitted_var_univ<- fit.variogram(variogram_univ, vgm(800000,'Exp',1500,1, Err = 1.5))
kriging_univ_full<- krige(price~listing$inter_size+listing$prox_subway+listing$prox_green+ listing$prox_grocery+listing$prox_affordable+listing$crime_rate, listing, toronto_grid, fitted_var_univ)
kriging_univ_full<- krige(price~listing$inter_size, listing, toronto_grid, fitted_var_univ)
kriging_univ_full<- krige(price~listing$inter_size, listing, toronto_grid['inter_size'], fitted_var_univ)
listing <- listing[!duplicated(listing$geometry),]
kriging_univ_full<- krige(price~listing$inter_size, listing, toronto_grid, fitted_var_univ)
kriging_univ_full<- krige(price~1, listing, toronto_grid, fitted_var_univ)
kriging_univ_full<- krige(price~listing$inter_size+listing$prox_subway+listing$prox_green+ listing$prox_grocery+listing$prox_affordable+listing$crime_rate, listing, fitted_var_univ)
crs(toronto_grid)
plot(toronto_grid)
kriging_univ_full<- krige(price~listing$inter_size+listing$prox_subway+listing$prox_green+ listing$prox_grocery+listing$prox_affordable+listing$crime_rate, listing,toronto_grid, fitted_var_univ)
kriging_univ_full<- gstat(price~listing$inter_size+listing$prox_subway+listing$prox_green+ listing$prox_grocery+listing$prox_affordable+listing$crime_rate, data = listing, fitted_var_univ)
kriging_univ_full<- gstat(formula = price~listing$inter_size+listing$prox_subway+listing$prox_green+ listing$prox_grocery+listing$prox_affordable+listing$crime_rate, data = listing, fitted_var_univ)
kriging_univ_full<- gstat(formula = price~listing$inter_size+listing$prox_subway+listing$prox_green+ listing$prox_grocery+listing$prox_affordable+listing$crime_rate, data = listing,model = fitted_var_univ)
View(kriging_univ_full)
View(kriging_univ_full)
ordinary_krige<- tm_layout(main.title = "Predicted Listing Prices Across Downtown\nToronto Using Ordinary Kriging")+
tm_shape(kriging_univ_full[1,,])+
tm_raster(title = 'Predicted Apartment Rental Prices', palette = "-Spectral")+
tm_shape(listing)+
tm_symbols(size = 0.2, col = 'blue')
View(price_krig)
#plot ordinary kriging model of predicted prices
ordinary_krige<- tm_layout(main.title = "Predicted Listing Prices Across Downtown\nToronto Using Ordinary Kriging")+
tm_shape(price_krig[1,,])+
tm_raster(title = 'Predicted Apartment Rental Prices', palette = "-Spectral")+
tm_shape(listing)+
tm_symbols(size = 0.2, col = 'blue')
ordinary_krige
kriging_univ_full2<- krige(formula = price~listing$inter_size+listing$prox_subway+listing$prox_green+ listing$prox_grocery+listing$prox_affordable+listing$crime_rate, listing$geometry,model = fitted_var_univ)
?krige
kriging_univ_full2<- krige(formula = price~listing$inter_size+listing$prox_subway+listing$prox_green+ listing$prox_grocery+listing$prox_affordable+listing$crime_rate, listing, newdata = toronto_grid[1],model = fitted_var_univ)
kriging_univ_full2<- krige(formula = listing$price~listing$inter_size+listing$prox_subway+listing$prox_green+ listing$prox_grocery+listing$prox_affordable+listing$crime_rate, listing, newdata = toronto_grid['value'],model = fitted_var_univ)
kriging_univ_full2<- krige(formula = listing$price~listing$inter_size+listing$prox_subway+listing$prox_green+ listing$prox_grocery+listing$prox_affordable+listing$crime_rate, listing, newdata = toronto_grid[1,,],model = fitted_var_univ)
kriging_univ_full2<- krige(formula = listing$price~listing$inter_size+listing$prox_subway+listing$prox_green+ listing$prox_grocery+listing$prox_affordable+listing$crime_rate, listing,model = fitted_var_univ)
toronto_grid['inter_size'] = listing$inter_size
toronto_grid['inter_size'] = listing$inter_size
toronto_grid['inter_size'] <- listing$inter_size
toronto_grid['inter_size'] <- rasterize(toronto_grid, listing$inter_size)
toronto_grid['inter_size'] <- listing$inter_size
toronto_grid['inter_size'] <- st_as_stars(listing$inter_size)
st_dimensions(toronto_grid)
st_set_dimensions(toronto_grid, listing$inter_size)
dims<-st_set_dimensions(toronto_grid, listing$inter_size)
st_dimensions(dims)
#areal model
neighborhoods<- aggregate(listing, crime_rates, mean)
View(neighborhoods)
#areal model
neighborhoods<- aggregate(listing, crime_rates, mean) %>% drop_na()
plot(neighborhoods)
plot(crime_rates)
tmap_animation(list_of_maps, filename = 'Features_gif.gif', delay = 200, width = 600, height = 600)
tmap_animation(list_of_maps, filename = 'Features_gif.gif', delay = 300, width = 600, height = 600)
plot(crime)
plot(crime_rate)
plot(crime_rates)
spatial_features_crime
list_of_maps<- list(spatial_features_grocery, spatial_features_green, spatial_features_afford, spatial_features_crime)
tmap_animation(list_of_maps, filename = 'Features_gif.gif', delay = 300, width = 600, height = 600)
#generate plot to view commercial listings with zoning
map3 =tm_layout(main.title = 'Zoning Regions of Downtown Toronto, with \nLocations of Office Space For Sale')+ tm_shape(osm)+
tm_rgb()+
tm_shape(zoning_proj)+
tm_polygons(col = 'ZN_ZONE3', title ='Zone')+
tm_shape(commercial_proj)+
tm_symbols(size = 0.2, col = 'Green')
map3
#generate plot to view commercial listings with zoning
map3 =tm_layout(main.title = 'Zoning Regions of Downtown Toronto, with \nLocations of Office Space For Sale')+ tm_shape(osm)+
tm_rgb()+
tm_shape(zoning_proj)+
tm_polygons(col = 'ZN_ZONE3', title ='Zone')+
tm_shape(commercial_proj)+
tm_symbols(size = 0.2, col = 'green')
map3
#generate plot to view commercial listings with zoning
map3 =tm_layout(main.title = 'Zoning Regions of Downtown Toronto, with \nLocations of Office Space For Sale')+ tm_shape(osm)+
tm_rgb()+
tm_shape(zoning_proj)+
tm_polygons(col = 'ZN_ZONE3', title ='Zone')+
tm_shape(commercial_proj)+
tm_symbols(size = 0.3, col = 'green')
map3
#generate plot to view commercial listings with zoning
map3 =tm_layout(main.title = 'Zoning Regions of Downtown Toronto, with \nLocations of Office Space For Sale')+ tm_shape(osm)+
tm_rgb()+
tm_shape(zoning_proj)+
tm_polygons(col = 'ZN_ZONE3', title ='Zone')+
tm_shape(commercial_proj)+
tm_symbols(size = 0.3, col = 'pink')
map3
#generate plot to view commercial listings with zoning
map3 =tm_layout(main.title = 'Zoning Regions of Downtown Toronto, with \nLocations of Office Space For Sale')+ tm_shape(osm)+
tm_rgb()+
tm_shape(zoning_proj)+
tm_polygons(col = 'ZN_ZONE3', title ='Zone')+
tm_shape(commercial_proj)+
tm_symbols(size = 0.3, col = 'orange')
map3
test_list<- st_as_stars(listing)
View(test_list)
View(toronto_grid)
test_list<- st_as_stars(listing) %>% crop(southern)
plot(test_list)
kriging_univ_full2<- krige(formula = listing$price~listing$inter_size+listing$prox_subway+listing$prox_green+ listing$prox_grocery+listing$prox_affordable+listing$crime_rate, listing, newdata = test_list, model = fitted_var_univ)
univ_krige_full<- tm_layout(main.title = "Predicted Listing Prices Across Downtown\nToronto Using Ordinary Kriging")+
tm_shape(kriging_univ_full2[1,,])+
tm_raster(title = 'Predicted Apartment Rental Prices', palette = "-Spectral")+
tm_shape(listing)+
tm_symbols(size = 0.2, col = 'blue')
univ_krige_full
View(kriging_univ_full2)
View(price_krig)
kriging_univ_full2<- krige(formula =price~listing$inter_size+listing$prox_subway+listing$prox_green+ listing$prox_grocery+listing$prox_affordable+listing$crime_rate, listing, newdata = test_list, model = fitted_var_univ)
View(kriging_univ_full2)
plot(kriging_univ_full2)
plot(kriging_univ_full2[var1.pred])
plot(kriging_univ_full2$var1.pred)
plot(kriging_univ_full2[1,,])
plot(kriging_univ_full2[,,1])
test_list<- st_as_stars(listing, dx = 100)
test_list<- st_as_stars(listing)
plot(test_list)
test_list<- st_bbox(listing)%>%st_as_stars()
kriging_univ_full2<- krige(formula =price~listing$inter_size+listing$prox_subway+listing$prox_green+ listing$prox_grocery+listing$prox_affordable+listing$crime_rate, listing, newdata = test_list, model = fitted_var_univ)
?update
# read in Boston dataset
boston_506 <- st_read(system.file("shapes/boston_tracts.shp",
package = "spData")[1], quiet = TRUE)
# some light data exploration
quantile(boston_506$median, na.rm = TRUE)
table(boston_506$censored)
# censored data plot
boston_506 %>%
tm_shape()+
tm_fill("censored")
# dumb way to make neighbours - get rid of missing values
boston_506 %>%
filter(!is.na(median)) %>%
poly2nb(queen = TRUE)
# INLA is not on the CRAN
# install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
# dumb way to make neighbours - get rid of missing values
boston_506 %>%
filter(!is.na(median)) %>%
poly2nb(queen = TRUE)
library(igraph)
library(spatialreg)
# dumb way to make neighbours - get rid of missing values
boston_506 %>%
filter(!is.na(median)) %>%
poly2nb(queen = TRUE)
library(spdep)
library(dplyr)
library(sf)
library(tmap)
library(Matrix)
library(spatialreg)
library(igraph)
library(ggplot2)
# Areal data
library(spdep)
library(dplyr)
library(sf)
library(tmap)
library(Matrix)
library(spatialreg)
library(igraph)
library(ggplot2)
# make neighbour structure without removing anything, using W weights
boston_neighbours = boston_506_imputed %>%
poly2nb(queen = TRUE) %>%
nb2listw(style = "W") %>%
as("CsparseMatrix")
boston_506_imputed %>%
tm_shape()+
tm_polygons(col = "median", style = "cont", title = "Median House Price")+
tm_layout(legend.outside = TRUE, frame = FALSE)
boston_506_imputed %>%
tm_shape()+
tm_polygons(col = "median", style = "cont", title = "Median House Price")+
tm_layout(legend.outside = TRUE, frame = FALSE)
# impute the missing values...for now
boston_506_imputed = boston_506 %>%
mutate(median = ifelse(censored == "right", 50000, median),
median = ifelse(censored == "left", 5000, median))
# make neighbour structure without removing anything, using W weights
boston_neighbours = boston_506_imputed %>%
poly2nb(queen = TRUE) %>%
nb2listw(style = "W") %>%
as("CsparseMatrix")
View(boston_506_imputed)
View(listing)
View(Listings_wlocations)
View(listings)
#filter listings to remove outliers from price and size columns
listing = listings%>%dplyr::select(price, beds, baths, inter_size, address) %>% dplyr::filter(price<6000)%>%st_transform('EPSG:2017')
commercial$size = gsub('sqft', x = commercial$size, " ")
#Add Distance based features to dataset
dist_list_subway = st_nn(listing$geometry, subway$geometry, k = 1, returnDist = T)
df_subway<- as.data.frame(dist_list_subway['dist']) %>% pivot_longer(cols = starts_with('dist'), values_to = 'result')
listing<- listing%>% mutate(prox_subway = df_subway$result)
dist_list_green = st_nn(listing$geometry, green_space$geometry, k = 1, returnDist = T)
View(neighborhoods)
df_green<- as.data.frame(dist_list_green['dist']) %>% pivot_longer(cols = starts_with('dist'), values_to = 'result')
listing<-listing %>%mutate(prox_green = df_green$result)
dist_list_grocery = st_nn(listing$geometry, grocery_stores$geometry, k = 1, returnDist = T)
df_grocery<- as.data.frame(dist_list_grocery['dist']) %>% pivot_longer(cols = starts_with('dist'), values_to = 'result')
listing<-listing %>%mutate(prox_grocery = df_grocery$result)
dist_list_affordable = st_nn(listing$geometry, affordable_housing$geometry, k = 1, returnDist = T)
df_affordable<- as.data.frame(dist_list_affordable['dist']) %>% pivot_longer(cols = starts_with('dist'), values_to = 'result')
listing<-listing %>%mutate(prox_affordable = df_affordable$result)
crime_rates = crime_rates %>% mutate(robberies_per_pop = ROBBERY112/POPN_PR4*1000) %>% dplyr::select(robberies_per_pop)
list_vect<- vect(listing)
rast_crime<- raster::rasterize(crime_rates, rast(toronto_grid), crime_rates$robberies_per_pop)
listing_full<- terra::extract(rast_crime, listing) %>% mutate(across(layer, ~replace_na(., median(.,na.rm = TRUE ))))
listing$crime_rate<- listing_full$layer
poly_transformed<- poly%>% st_transform('EPSG:2017')
listing = listing[poly_transformed,,op=st_within]
#areal model
neighborhoods<- aggregate(listing, crime_rates, mean) %>% drop_na()
#areal model
neighborhoods<-listing%>%select(-address) %>%aggregate(listing, crime_rates, mean) %>% drop_na()
#areal model
neighborhoods<-listing%>% dplyr::select(-address) %>%aggregate(listing, crime_rates, mean) %>% drop_na()
#areal model
neighborhoods<-listing%>% dplyr::select(-address) %>%aggregate(crime_rates, mean) %>% drop_na()
neighborhoods$id<- seq(1, length(neighborhoods))
neighborhoods$id<- seq(1, nrow(neighborhoods))
neighbs_nb<- neighborhoods%>% poly2nb(queen = TRUE) %>% nb2listw(style = "W") %>%
as("CsparseMatrix")
formula<- formula(price~beds+inter_size+prox_subway+prox_green+prox_grocery+prox_affordable+crime_rate)
id_mod<- as.numeric(as.factor(neighborhoods$id))
model_inla = inla(update(formula, .~., f(id_mod, model = "besag",
graph = neighbs_nb)),
family = "gaussian", data = neighborhoods,
control.predictor=list(compute=TRUE))
summary(model_inla)
reduced_formula<-formula(price~beds+inter_size+prox_affordable+crime_rate)
reduced_inla = inla(update(reduced_formula, .~., f(id_mod, model = "besag",
graph = neighbs_nb)),
family = "gaussian", data = neighborhoods,
control.predictor=list(compute=TRUE))
summary(reduced_inla)
neighborhoods$ICAR_means = INLA_ss$summary.random$id$mean
neighborhoods$ICAR_means = reduced_inla$summary.random$id$mean
neighborhoods$linear_predictor = summary(reduced_inla)$linear.predictor$mean
tm_shape(neighborhoods)+
tm_polygons(col = "ICAR_means",
style = "cont",
title = expression(gamma) )+
tm_layout(frame = FALSE, legend.outside = TRUE, main.title = "Spatially structured random effects")
tm_shape(neighborhoods)+
tm_polygons(col = ICAR_means
style = "cont",
tm_shape(neighborhoods)+
tm_polygons(col = ICAR_means,
style = "cont",
title = expression(gamma) )+
tm_layout(frame = FALSE, legend.outside = TRUE, main.title = "Spatially structured random effects")
tm_shape(neighborhoods)+
tm_polygons(col = 'ICAR_means',
style = "cont",
title = expression(gamma) )+
tm_layout(frame = FALSE, legend.outside = TRUE, main.title = "Spatially structured random effects")
tm_shape(neighborhoods)+
tm_polygons(
style = "cont",
title = expression(gamma) )+
tm_layout(frame = FALSE, legend.outside = TRUE, main.title = "Spatially structured random effects")
neighborhoods$linear_predictor = summary(reduced_inla)$linear.predictor$mean
neighborhoods$ICAR_means = reduced_inla$summary.random$id$mean
neighborhoods$ICAR_means = reduced_inla$summary.random$id_mod$mean
tm_shape(neighborhoods)+
tm_polygons(col = 'ICAR_means'
style = "cont",
tm_shape(neighborhoods)+
tm_polygons(col = 'ICAR_means',
style = "cont",
title = expression(gamma) )+
tm_layout(frame = FALSE, legend.outside = TRUE, main.title = "Spatially structured random effects")
tm_shape(neighborhoods)+
tm_polygons(col = "linear_predictor",
style = "cont",
title = "linear predictor")+
tm_layout(frame = FALSE, legend.outside = TRUE, main.title = "Linear predictor component of model")
plot(neighbs_nb)
neighborhoods%>% poly2nb(queen = TRUE) %>%plot()
View(neighbs_nb)
neighborhoods$ICAR_means = reduced_inla$summary.random$id_mod$mean()
View(neighbs_nb)
plot(neighbs_nb)
plot(boston_neighbours)
plot(boston_neighbours)
poltract2 <- as.integer(as.factor(boston_506_imputed$poltract))
View(reduced_inla)
fitted = reduced_inla$summary.fitted.values$mean
fitted = reduced_inla$summary.fitted.values$mean
tm_shape(neighborhoods)+
tm_polygons(col = 'fitted')
tm_shape(neighborhoods)+
tm_polygons(col = fitted)
neighborhoods$fitted = fitted
tm_shape(neighborhoods)+
tm_polygons(col = fitted)
View(neighborhoods)
reduced_formula<-formula(price~beds+inter_size+prox_affordable+prox_grocery)
id_mod<- as.numeric(as.factor(neighborhoods$id))
model_inla = inla(update(formula, .~., f(id_mod, model = "besag",
graph = neighbs_nb)),
family = "gaussian", data = neighborhoods,
control.predictor=list(compute=TRUE))
model_inla = inla(update(formula, .~., f(id_mod, model = "besag",
graph = neighbs_nb)),
family = "gaussian", data = neighborhoods,
control.predictor=list(compute=TRUE))
reduced_inla = inla(update(reduced_formula, .~., f(id_mod, model = "besag",
graph = neighbs_nb)),
family = "gaussian", data = neighborhoods,
control.predictor=list(compute=TRUE))
neighborhoods$ICAR_means = reduced_inla$summary.random$id_mod$mean
View(neighborhoods)
neighborhoods$ICAR_means = reduced_inla$summary.random$id_mod$mean
View(neighborhoods)
reduced_inla$summary.random$id_mod$mean
reduced_inle
plot(neighbs_nb)
View(neighborhoods)
model_inla = inla(update(formula, .~., f(id_mod, model = "besag",
graph = neighbs_nb)),
family = "gaussian", data = neighborhoods,
control.predictor=list(compute=TRUE))
reduced_inla = inla(update(reduced_formula, .~., f(id_mod, model = "besag",
graph = neighbs_nb)),
family = "gaussian", data = neighborhoods,
control.predictor=list(compute=TRUE))
reduced_inla$summary.random
reduced_inla = inla(update(reduced_formula, .~., f(id_mod, model = "besag",
graph = neighbs_nb)),
family = "gaussian", data = neighborhoods,
control.predictor=list(compute=TRUE))
summary(reduced_inla)
View(commercial_proj)
